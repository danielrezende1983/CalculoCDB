{"ast":null,"code":"/**\n * @license Angular v14.0.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\n\nclass HttpTestingController {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\n\n\nclass TestRequest {\n  constructor(request, observer) {\n    this.request = request;\n    this.observer = observer;\n    /**\n     * @internal set by `HttpClientTestingBackend`\n     */\n\n    this._cancelled = false;\n  }\n  /**\n   * Whether the request was cancelled after it was sent.\n   */\n\n\n  get cancelled() {\n    return this._cancelled;\n  }\n  /**\n   * Resolve the request by returning a body plus additional HTTP information (such as response\n   * headers) if provided.\n   * If the request specifies an expected body type, the body is converted into the requested type.\n   * Otherwise, the body is converted to `JSON` by default.\n   *\n   * Both successful and unsuccessful responses can be delivered via `flush()`.\n   */\n\n\n  flush(body, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot flush a cancelled request.`);\n    }\n\n    const url = this.request.urlWithParams;\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    body = _maybeConvertBody(this.request.responseType, body);\n    let statusText = opts.statusText;\n    let status = opts.status !== undefined ? opts.status : 200\n    /* HttpStatusCode.Ok */\n    ;\n\n    if (opts.status === undefined) {\n      if (body === null) {\n        status = 204\n        /* HttpStatusCode.NoContent */\n        ;\n        statusText = statusText || 'No Content';\n      } else {\n        statusText = statusText || 'OK';\n      }\n    }\n\n    if (statusText === undefined) {\n      throw new Error('statusText is required when setting a custom status.');\n    }\n\n    if (status >= 200 && status < 300) {\n      this.observer.next(new HttpResponse({\n        body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n      this.observer.complete();\n    } else {\n      this.observer.error(new HttpErrorResponse({\n        error: body,\n        headers,\n        status,\n        statusText,\n        url\n      }));\n    }\n  }\n\n  error(error, opts = {}) {\n    if (this.cancelled) {\n      throw new Error(`Cannot return an error for a cancelled request.`);\n    }\n\n    if (opts.status && opts.status >= 200 && opts.status < 300) {\n      throw new Error(`error() called with a successful status.`);\n    }\n\n    const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n    this.observer.error(new HttpErrorResponse({\n      error,\n      headers,\n      status: opts.status || 0,\n      statusText: opts.statusText || '',\n      url: this.request.urlWithParams\n    }));\n  }\n  /**\n   * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n   * request.\n   */\n\n\n  event(event) {\n    if (this.cancelled) {\n      throw new Error(`Cannot send events to a cancelled request.`);\n    }\n\n    this.observer.next(event);\n  }\n\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\n\n\nfunction _toArrayBufferBody(body) {\n  if (typeof ArrayBuffer === 'undefined') {\n    throw new Error('ArrayBuffer responses are not supported on this platform.');\n  }\n\n  if (body instanceof ArrayBuffer) {\n    return body;\n  }\n\n  throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\n\n\nfunction _toBlob(body) {\n  if (typeof Blob === 'undefined') {\n    throw new Error('Blob responses are not supported on this platform.');\n  }\n\n  if (body instanceof Blob) {\n    return body;\n  }\n\n  if (ArrayBuffer && body instanceof ArrayBuffer) {\n    return new Blob([body]);\n  }\n\n  throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\n\n\nfunction _toJsonBody(body, format = 'JSON') {\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n  }\n\n  if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' || typeof body === 'boolean' || Array.isArray(body)) {\n    return body;\n  }\n\n  throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\n\n\nfunction _toTextBody(body) {\n  if (typeof body === 'string') {\n    return body;\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n    throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n  }\n\n  if (typeof Blob !== 'undefined' && body instanceof Blob) {\n    throw new Error('Automatic conversion to text is not supported for Blobs.');\n  }\n\n  return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\n\n\nfunction _maybeConvertBody(responseType, body) {\n  if (body === null) {\n    return null;\n  }\n\n  switch (responseType) {\n    case 'arraybuffer':\n      return _toArrayBufferBody(body);\n\n    case 'blob':\n      return _toBlob(body);\n\n    case 'json':\n      return _toJsonBody(body);\n\n    case 'text':\n      return _toTextBody(body);\n\n    default:\n      throw new Error(`Unsupported responseType: ${responseType}`);\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\n\n\nclass HttpClientTestingBackend {\n  constructor() {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    this.open = [];\n  }\n  /**\n   * Handle an incoming request by queueing it in the list of open requests.\n   */\n\n\n  handle(req) {\n    return new Observable(observer => {\n      const testReq = new TestRequest(req, observer);\n      this.open.push(testReq);\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      return () => {\n        testReq._cancelled = true;\n      };\n    });\n  }\n  /**\n   * Helper function to search for requests in the list of open requests.\n   */\n\n\n  _match(match) {\n    if (typeof match === 'string') {\n      return this.open.filter(testReq => testReq.request.urlWithParams === match);\n    } else if (typeof match === 'function') {\n      return this.open.filter(testReq => match(testReq.request));\n    } else {\n      return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) && (!match.url || testReq.request.urlWithParams === match.url));\n    }\n  }\n  /**\n   * Search for requests in the list of open requests, and return all that match\n   * without asserting anything about the number of matches.\n   */\n\n\n  match(match) {\n    const results = this._match(match);\n\n    results.forEach(result => {\n      const index = this.open.indexOf(result);\n\n      if (index !== -1) {\n        this.open.splice(index, 1);\n      }\n    });\n    return results;\n  }\n  /**\n   * Expect that a single outstanding request matches the given matcher, and return\n   * it.\n   *\n   * Requests returned through this API will no longer be in the list of open requests,\n   * and thus will not match twice.\n   */\n\n\n  expectOne(match, description) {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n\n    if (matches.length > 1) {\n      throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n    }\n\n    if (matches.length === 0) {\n      let message = `Expected one matching request for criteria \"${description}\", found none.`;\n\n      if (this.open.length > 0) {\n        // Show the methods and URLs of open requests in the error, for convenience.\n        const requests = this.open.map(describeRequest).join(', ');\n        message += ` Requests received are: ${requests}.`;\n      }\n\n      throw new Error(message);\n    }\n\n    return matches[0];\n  }\n  /**\n   * Expect that no outstanding requests match the given matcher, and throw an error\n   * if any do.\n   */\n\n\n  expectNone(match, description) {\n    description = description || this.descriptionFromMatcher(match);\n    const matches = this.match(match);\n\n    if (matches.length > 0) {\n      throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n    }\n  }\n  /**\n   * Validate that there are no outstanding requests.\n   */\n\n\n  verify(opts = {}) {\n    let open = this.open; // It's possible that some requests may be cancelled, and this is expected.\n    // The user can ask to ignore open requests which have been cancelled.\n\n    if (opts.ignoreCancelled) {\n      open = open.filter(testReq => !testReq.cancelled);\n    }\n\n    if (open.length > 0) {\n      // Show the methods and URLs of open requests in the error, for convenience.\n      const requests = open.map(describeRequest).join(', ');\n      throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n    }\n  }\n\n  descriptionFromMatcher(matcher) {\n    if (typeof matcher === 'string') {\n      return `Match URL: ${matcher}`;\n    } else if (typeof matcher === 'object') {\n      const method = matcher.method || '(any)';\n      const url = matcher.url || '(any)';\n      return `Match method: ${method}, URL: ${url}`;\n    } else {\n      return `Match by function: ${matcher.name}`;\n    }\n  }\n\n}\n\nHttpClientTestingBackend.ɵfac = function HttpClientTestingBackend_Factory(t) {\n  return new (t || HttpClientTestingBackend)();\n};\n\nHttpClientTestingBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpClientTestingBackend,\n  factory: HttpClientTestingBackend.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientTestingBackend, [{\n    type: Injectable\n  }], null, null);\n})();\n\nfunction describeRequest(testRequest) {\n  const url = testRequest.request.urlWithParams;\n  const method = testRequest.request.method;\n  return `${method} ${url}`;\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\n\n\nclass HttpClientTestingModule {}\n\nHttpClientTestingModule.ɵfac = function HttpClientTestingModule_Factory(t) {\n  return new (t || HttpClientTestingModule)();\n};\n\nHttpClientTestingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HttpClientTestingModule,\n  imports: [HttpClientModule]\n});\nHttpClientTestingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [HttpClientTestingBackend, {\n    provide: HttpBackend,\n    useExisting: HttpClientTestingBackend\n  }, {\n    provide: HttpTestingController,\n    useExisting: HttpClientTestingBackend\n  }],\n  imports: [HttpClientModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientTestingModule, [{\n    type: NgModule,\n    args: [{\n      imports: [HttpClientModule],\n      providers: [HttpClientTestingBackend, {\n        provide: HttpBackend,\n        useExisting: HttpClientTestingBackend\n      }, {\n        provide: HttpTestingController,\n        useExisting: HttpClientTestingBackend\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest };","map":{"version":3,"names":["HttpHeaders","HttpResponse","HttpErrorResponse","HttpEventType","HttpClientModule","HttpBackend","i0","Injectable","NgModule","Observable","HttpTestingController","TestRequest","constructor","request","observer","_cancelled","cancelled","flush","body","opts","Error","url","urlWithParams","headers","_maybeConvertBody","responseType","statusText","status","undefined","next","complete","error","event","_toArrayBufferBody","ArrayBuffer","_toBlob","Blob","_toJsonBody","format","Array","isArray","_toTextBody","JSON","stringify","HttpClientTestingBackend","open","handle","req","testReq","push","type","Sent","_match","match","filter","method","toUpperCase","results","forEach","result","index","indexOf","splice","expectOne","description","descriptionFromMatcher","matches","length","message","requests","map","describeRequest","join","expectNone","verify","ignoreCancelled","matcher","name","ɵfac","ɵprov","testRequest","HttpClientTestingModule","ɵmod","ɵinj","provide","useExisting","args","imports","providers"],"sources":["E:/PROVA/CalculoCDB/CalculoCDB/CalculoCDB.Presentation/ClientApp/node_modules/@angular/common/fesm2015/http/testing.mjs"],"sourcesContent":["/**\n * @license Angular v14.0.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpEventType, HttpClientModule, HttpBackend } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nclass HttpTestingController {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n    constructor(request, observer) {\n        this.request = request;\n        this.observer = observer;\n        /**\n         * @internal set by `HttpClientTestingBackend`\n         */\n        this._cancelled = false;\n    }\n    /**\n     * Whether the request was cancelled after it was sent.\n     */\n    get cancelled() {\n        return this._cancelled;\n    }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    flush(body, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot flush a cancelled request.`);\n        }\n        const url = this.request.urlWithParams;\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        let statusText = opts.statusText;\n        let status = opts.status !== undefined ? opts.status : 200 /* HttpStatusCode.Ok */;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = 204 /* HttpStatusCode.NoContent */;\n                statusText = statusText || 'No Content';\n            }\n            else {\n                statusText = statusText || 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\n        }\n    }\n    error(error, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot return an error for a cancelled request.`);\n        }\n        if (opts.status && opts.status >= 200 && opts.status < 300) {\n            throw new Error(`error() called with a successful status.`);\n        }\n        const headers = (opts.headers instanceof HttpHeaders) ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error,\n            headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    event(event) {\n        if (this.cancelled) {\n            throw new Error(`Cannot send events to a cancelled request.`);\n        }\n        this.observer.next(event);\n    }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n    }\n    if (typeof body === 'string' || typeof body === 'number' || typeof body === 'object' ||\n        typeof body === 'boolean' || Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(`Unsupported responseType: ${responseType}`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n    constructor() {\n        /**\n         * List of pending requests which have not yet been expected.\n         */\n        this.open = [];\n    }\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req) {\n        return new Observable((observer) => {\n            const testReq = new TestRequest(req, observer);\n            this.open.push(testReq);\n            observer.next({ type: HttpEventType.Sent });\n            return () => {\n                testReq._cancelled = true;\n            };\n        });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    _match(match) {\n        if (typeof match === 'string') {\n            return this.open.filter(testReq => testReq.request.urlWithParams === match);\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter(testReq => match(testReq.request));\n        }\n        else {\n            return this.open.filter(testReq => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url));\n        }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match) {\n        const results = this._match(match);\n        results.forEach(result => {\n            const index = this.open.indexOf(result);\n            if (index !== -1) {\n                this.open.splice(index, 1);\n            }\n        });\n        return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n        }\n        if (matches.length === 0) {\n            let message = `Expected one matching request for criteria \"${description}\", found none.`;\n            if (this.open.length > 0) {\n                // Show the methods and URLs of open requests in the error, for convenience.\n                const requests = this.open.map(describeRequest).join(', ');\n                message += ` Requests received are: ${requests}.`;\n            }\n            throw new Error(message);\n        }\n        return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match, description) {\n        description = description || this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n        }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts = {}) {\n        let open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter(testReq => !testReq.cancelled);\n        }\n        if (open.length > 0) {\n            // Show the methods and URLs of open requests in the error, for convenience.\n            const requests = open.map(describeRequest).join(', ');\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n        }\n    }\n    descriptionFromMatcher(matcher) {\n        if (typeof matcher === 'string') {\n            return `Match URL: ${matcher}`;\n        }\n        else if (typeof matcher === 'object') {\n            const method = matcher.method || '(any)';\n            const url = matcher.url || '(any)';\n            return `Match method: ${method}, URL: ${url}`;\n        }\n        else {\n            return `Match by function: ${matcher.name}`;\n        }\n    }\n}\nHttpClientTestingBackend.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nHttpClientTestingBackend.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingBackend });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingBackend, decorators: [{\n            type: Injectable\n        }] });\nfunction describeRequest(testRequest) {\n    const url = testRequest.request.urlWithParams;\n    const method = testRequest.request.method;\n    return `${method} ${url}`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n */\nclass HttpClientTestingModule {\n}\nHttpClientTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHttpClientTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingModule, imports: [HttpClientModule] });\nHttpClientTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingModule, providers: [\n        HttpClientTestingBackend,\n        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n    ], imports: [HttpClientModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.3\", ngImport: i0, type: HttpClientTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        HttpClientModule,\n                    ],\n                    providers: [\n                        HttpClientTestingBackend,\n                        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n                        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}