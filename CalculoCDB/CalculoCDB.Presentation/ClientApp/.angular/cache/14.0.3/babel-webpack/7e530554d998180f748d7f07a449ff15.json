{"ast":null,"code":"import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n  suffix: '',\n  prefix: '',\n  thousandSeparator: ' ',\n  decimalMarker: '.',\n  clearIfNotMatch: false,\n  showTemplate: false,\n  showMaskTyped: false,\n  placeHolderCharacter: '_',\n  dropSpecialCharacters: true,\n  hiddenInput: undefined,\n  shownMaskExpression: '',\n  separatorLimit: '',\n  allowNegativeNumbers: false,\n  validation: true,\n  // tslint:disable-next-line: quotemark\n  specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n  leadZeroDateTime: false,\n  patterns: {\n    '0': {\n      pattern: new RegExp('\\\\d')\n    },\n    '9': {\n      pattern: new RegExp('\\\\d'),\n      optional: true\n    },\n    X: {\n      pattern: new RegExp('\\\\d'),\n      symbol: '*'\n    },\n    A: {\n      pattern: new RegExp('[a-zA-Z0-9]')\n    },\n    S: {\n      pattern: new RegExp('[a-zA-Z]')\n    },\n    d: {\n      pattern: new RegExp('\\\\d')\n    },\n    m: {\n      pattern: new RegExp('\\\\d')\n    },\n    M: {\n      pattern: new RegExp('\\\\d')\n    },\n    H: {\n      pattern: new RegExp('\\\\d')\n    },\n    h: {\n      pattern: new RegExp('\\\\d')\n    },\n    s: {\n      pattern: new RegExp('\\\\d')\n    }\n  }\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = ['percent', 'Hh', 's0', 'm0', 'separator', 'd0/M0/0000', 'd0/M0', 'd0', 'M0'];\n\nclass MaskApplierService {\n  constructor(_config) {\n    this._config = _config;\n    this.maskExpression = '';\n    this.actualValue = '';\n    this.shownMaskExpression = '';\n\n    this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n      const x = str.split(decimalChar);\n      const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n      let res = x[0];\n      const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n\n      if (separatorLimit && +separatorLimit) {\n        if (res[0] === '-') {\n          res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n        } else {\n          res = res.slice(0, separatorLimit.length);\n        }\n      }\n\n      const rgx = /(\\d+)(\\d{3})/;\n\n      while (thousandSeparatorChar && rgx.test(res)) {\n        res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n      }\n\n      if (precision === undefined) {\n        return res + decimals;\n      } else if (precision === 0) {\n        return res;\n      }\n\n      return res + decimals.substr(0, precision + 1);\n    };\n\n    this.percentage = str => {\n      return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    this.getPrecision = maskExpression => {\n      const x = maskExpression.split('.');\n\n      if (x.length > 1) {\n        return Number(x[x.length - 1]);\n      }\n\n      return Infinity;\n    };\n\n    this.checkAndRemoveSuffix = inputValue => {\n      var _a, _b, _c;\n\n      for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n        const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n\n        if (inputValue.includes(substr) && (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n          return inputValue.replace(substr, '');\n        }\n      }\n\n      return inputValue;\n    };\n\n    this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n      if (precision < Infinity) {\n        const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n        const precisionMatch = inputValue.match(precisionRegEx);\n\n        if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n          const diff = precisionMatch[0].length - 1 - precision;\n          inputValue = inputValue.substring(0, inputValue.length - diff);\n        }\n\n        if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n          inputValue = inputValue.substring(0, inputValue.length - 1);\n        }\n      }\n\n      return inputValue;\n    };\n\n    this._shift = new Set();\n    this.clearIfNotMatch = this._config.clearIfNotMatch;\n    this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n    this.maskSpecialCharacters = this._config.specialCharacters;\n    this.maskAvailablePatterns = this._config.patterns;\n    this.prefix = this._config.prefix;\n    this.suffix = this._config.suffix;\n    this.thousandSeparator = this._config.thousandSeparator;\n    this.decimalMarker = this._config.decimalMarker;\n    this.hiddenInput = this._config.hiddenInput;\n    this.showMaskTyped = this._config.showMaskTyped;\n    this.placeHolderCharacter = this._config.placeHolderCharacter;\n    this.validation = this._config.validation;\n    this.separatorLimit = this._config.separatorLimit;\n    this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n    this.leadZeroDateTime = this._config.leadZeroDateTime;\n  }\n\n  applyMaskWithPattern(inputValue, maskAndPattern) {\n    const [mask, customPattern] = maskAndPattern;\n    this.customPattern = customPattern;\n    return this.applyMask(inputValue, mask);\n  }\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n      return '';\n    }\n\n    let cursor = 0;\n    let result = '';\n    let multi = false;\n    let backspaceShift = false;\n    let shift = 1;\n    let stepBack = false;\n\n    if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n      inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n    }\n\n    if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n      inputValue = this.checkAndRemoveSuffix(inputValue);\n    }\n\n    const inputArray = inputValue.toString().split('');\n\n    if (maskExpression === 'IP') {\n      this.ipError = !!(inputArray.filter(i => i === '.').length < 3 && inputArray.length < 7);\n      maskExpression = '099.099.099.099';\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputValue.length; i++) {\n      if (inputValue[i].match('\\\\d')) {\n        arr.push(inputValue[i]);\n      }\n    }\n\n    if (maskExpression === 'CPF_CNPJ') {\n      this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n\n      if (arr.length > 11) {\n        maskExpression = '00.000.000/0000-00';\n      } else {\n        maskExpression = '000.000.000-00';\n      }\n    }\n\n    if (maskExpression.startsWith('percent')) {\n      if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n        inputValue = this._stripToDecimal(inputValue);\n        const precision = this.getPrecision(maskExpression);\n        inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      }\n\n      if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n        const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n        inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n      }\n\n      if (this.percentage(inputValue)) {\n        result = inputValue;\n      } else {\n        result = inputValue.substring(0, inputValue.length - 1);\n      }\n    } else if (maskExpression.startsWith('separator')) {\n      if (inputValue.match('[wа-яА-Я]') || inputValue.match('[ЁёА-я]') || inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) || inputValue.match('[^A-Za-z0-9,]')) {\n        inputValue = this._stripToDecimal(inputValue);\n      }\n\n      inputValue = inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker ? inputValue.slice(1, inputValue.length) : inputValue; // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n      //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n\n      const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n\n      const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n\n      const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeperatorCharEscaped, '').replace(decimalMarkerEscaped, '');\n      const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n\n      if (inputValue.match(invalidCharRegexp)) {\n        inputValue = inputValue.substring(0, inputValue.length - 1);\n      }\n\n      const precision = this.getPrecision(maskExpression);\n      inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n      const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n      result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n      const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n      const shiftStep = result.length - inputValue.length;\n\n      if (shiftStep > 0 && result[position] !== ',') {\n        backspaceShift = true;\n        let _shift = 0;\n\n        do {\n          this._shift.add(position + _shift);\n\n          _shift++;\n        } while (_shift < shiftStep);\n      } else if (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3) || !(result.indexOf('.') >= position && position > 3) && shiftStep <= 0) {\n        this._shift.clear();\n\n        backspaceShift = true;\n        shift = shiftStep;\n        position += shiftStep;\n\n        this._shift.add(position);\n      } else {\n        this._shift.clear();\n      }\n    } else {\n      for ( // tslint:disable-next-line\n      let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n        if (cursor === maskExpression.length) {\n          break;\n        }\n\n        if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n          result += inputSymbol;\n          cursor += 2;\n        } else if (maskExpression[cursor + 1] === '*' && multi && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n          multi = false;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n          result += inputSymbol;\n          multi = true;\n        } else if (maskExpression[cursor + 1] === '?' && this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n          result += inputSymbol;\n          cursor += 3;\n        } else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n          if (maskExpression[cursor] === 'H') {\n            if (Number(inputSymbol) > 2) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'h') {\n            if (result === '2' && Number(inputSymbol) > 3) {\n              cursor += 1;\n              i--;\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'm') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 's') {\n            if (Number(inputSymbol) > 5) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          const daysCount = 31;\n\n          if (maskExpression[cursor] === 'd') {\n            if (Number(inputSymbol) > 3 && this.leadZeroDateTime || Number(inputValue.slice(cursor, cursor + 2)) > daysCount || inputValue[cursor + 1] === '/') {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          if (maskExpression[cursor] === 'M') {\n            const monthsCount = 12; // mask without day\n\n            const withoutDays = cursor === 0 && (Number(inputSymbol) > 2 || Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for input\n\n            const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') && (inputValue[cursor - 2] === '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount && inputValue[cursor] !== '/' || inputValue[cursor] === '/' || inputValue[cursor - 3] === '/' && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount && inputValue[cursor - 1] !== '/' || inputValue[cursor - 1] === '/'); // 10<day<31 && month<12 for input\n\n            const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] === '/' && (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/'); // day<10 && month<12 for paste whole data\n\n            const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && !inputValue.slice(cursor - 2, cursor).includes('/') && Number(inputValue.slice(cursor - 2, cursor)) > monthsCount; // 10<day<31 && month<12 for paste whole data\n\n            const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount && !inputValue.slice(cursor - 3, cursor - 1).includes('/') && inputValue[cursor - 1] !== '/' && Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n\n            if (Number(inputSymbol) > 1 && this.leadZeroDateTime || withoutDays || day1monthInput || day2monthInput || day1monthPaste || day2monthPaste) {\n              cursor += 1;\n\n              this._shiftStep(maskExpression, cursor, inputArray.length);\n\n              i--;\n\n              if (this.leadZeroDateTime) {\n                result += '0';\n              }\n\n              continue;\n            }\n          }\n\n          result += inputSymbol;\n          cursor++;\n        } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n          result += maskExpression[cursor];\n          cursor++;\n\n          this._shiftStep(maskExpression, cursor, inputArray.length);\n\n          i--;\n        } else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 && this.maskAvailablePatterns[maskExpression[cursor]] && this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n          if (!!inputArray[cursor] && maskExpression !== '099.099.099.099' && maskExpression !== '000.000.000-00' && maskExpression !== '00.000.000/0000-00') {\n            result += inputArray[cursor];\n          }\n\n          cursor++;\n          i--;\n        } else if (this.maskExpression[cursor + 1] === '*' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.maskExpression[cursor + 1] === '?' && this._findSpecialChar(this.maskExpression[cursor + 2]) && this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] && multi) {\n          cursor += 3;\n          result += inputSymbol;\n        } else if (this.showMaskTyped && this.maskSpecialCharacters.indexOf(inputSymbol) < 0 && inputSymbol !== this.placeHolderCharacter) {\n          stepBack = true;\n        }\n      }\n    }\n\n    if (result.length + 1 === maskExpression.length && this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n      result += maskExpression[maskExpression.length - 1];\n    }\n\n    let newPosition = position + 1;\n\n    while (this._shift.has(newPosition)) {\n      shift++;\n      newPosition++;\n    }\n\n    let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n\n    if (stepBack) {\n      actualShift--;\n    }\n\n    cb(actualShift, backspaceShift);\n\n    if (shift < 0) {\n      this._shift.clear();\n    }\n\n    let onlySpecial = false;\n\n    if (backspaced) {\n      onlySpecial = inputArray.every(char => this.maskSpecialCharacters.includes(char));\n    }\n\n    let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n\n    if (result.length === 0) {\n      res = `${this.prefix}${result}`;\n    }\n\n    return res;\n  }\n\n  _findSpecialChar(inputSymbol) {\n    return this.maskSpecialCharacters.find(val => val === inputSymbol);\n  }\n\n  _checkSymbolMask(inputSymbol, maskSymbol) {\n    this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n    return this.maskAvailablePatterns[maskSymbol] && this.maskAvailablePatterns[maskSymbol].pattern && this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol);\n  }\n\n  _stripToDecimal(str) {\n    return str.split('').filter((i, idx) => {\n      return i.match('^-?\\\\d') || i.match('\\\\s') || i === '.' || i === ',' || i === '-' && idx === 0 && this.allowNegativeNumbers;\n    }).join('');\n  }\n\n  _charToRegExpExpression(char) {\n    if (char) {\n      const charsToEscape = '[\\\\^$.|?*+()';\n      return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n    }\n\n    return char;\n  }\n\n  _shiftStep(maskExpression, cursor, inputLength) {\n    const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n\n    this._shift.add(shiftStep + this.prefix.length || 0);\n  }\n\n}\n\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) {\n  return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config));\n};\n\nMaskApplierService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MaskApplierService,\n  factory: MaskApplierService.ɵfac\n});\n\nMaskApplierService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskApplierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, null);\n})();\n\nclass MaskService extends MaskApplierService {\n  constructor(document, _config, _elementRef, _renderer) {\n    super(_config);\n    this.document = document;\n    this._config = _config;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this.maskExpression = '';\n    this.isNumberValue = false;\n    this.placeHolderCharacter = '_';\n    this.maskIsShown = '';\n    this.selStart = null;\n    this.selEnd = null;\n    /**\n     * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n     * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n     */\n\n    this.writingValue = false;\n\n    this.onChange = _ => {};\n  } // tslint:disable-next-line:cyclomatic-complexity\n\n\n  applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => {}) {\n    if (!maskExpression) {\n      return inputValue;\n    }\n\n    this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n\n    if (this.maskExpression === 'IP' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n      this.maskIsShown = this.showMaskInInput(inputValue || '#');\n    }\n\n    if (!inputValue && this.showMaskTyped) {\n      this.formControlResult(this.prefix);\n      return this.prefix + this.maskIsShown;\n    }\n\n    const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n    let newInputValue = '';\n\n    if (this.hiddenInput !== undefined) {\n      let actualResult = this.actualValue.split(''); // tslint:disable no-unused-expression\n\n      inputValue !== '' && actualResult.length ? typeof this.selStart === 'number' && typeof this.selEnd === 'number' ? inputValue.length > actualResult.length ? actualResult.splice(this.selStart, 0, getSymbol) : inputValue.length < actualResult.length ? actualResult.length - inputValue.length === 1 ? actualResult.splice(this.selStart - 1, 1) : actualResult.splice(this.selStart, this.selEnd - this.selStart) : null : null : actualResult = []; // tslint:enable no-unused-expression\n\n      newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n    }\n\n    newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n    const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n    this.actualValue = this.getActualValue(result); // handle some separator implications:\n    // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n\n    if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n      this.decimalMarker = ',';\n    } // b) remove decimal marker from list of special characters to mask\n\n\n    if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n      this.maskSpecialCharacters = this.maskSpecialCharacters.filter(item => item !== this.decimalMarker);\n    }\n\n    this.formControlResult(result);\n\n    if (!this.showMaskTyped) {\n      if (this.hiddenInput) {\n        return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n      }\n\n      return result;\n    }\n\n    const resLen = result.length;\n    const prefNmask = this.prefix + this.maskIsShown;\n\n    if (this.maskExpression.includes('H')) {\n      const countSkipedSymbol = this._numberSkipedSymbols(result);\n\n      return result + prefNmask.slice(resLen + countSkipedSymbol);\n    } else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n      return result + prefNmask;\n    }\n\n    return result + prefNmask.slice(resLen);\n  } // get the number of characters that were shifted\n\n\n  _numberSkipedSymbols(value) {\n    const regex = /(^|\\D)(\\d\\D)/g;\n    let match = regex.exec(value);\n    let countSkipedSymbol = 0;\n\n    while (match != null) {\n      countSkipedSymbol += 1;\n      match = regex.exec(value);\n    }\n\n    return countSkipedSymbol;\n  }\n\n  applyValueChanges(position = 0, justPasted, backspaced, cb = () => {}) {\n    const formElement = this._elementRef.nativeElement;\n    formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n\n    if (formElement === this.document.activeElement) {\n      return;\n    }\n\n    this.clearIfNotMatchFn();\n  }\n\n  hideInput(inputValue, maskExpression) {\n    return inputValue.split('').map((curr, index) => {\n      if (this.maskAvailablePatterns && this.maskAvailablePatterns[maskExpression[index]] && this.maskAvailablePatterns[maskExpression[index]].symbol) {\n        return this.maskAvailablePatterns[maskExpression[index]].symbol;\n      }\n\n      return curr;\n    }).join('');\n  } // this function is not necessary, it checks result against maskExpression\n\n\n  getActualValue(res) {\n    const compare = res.split('').filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) || this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]);\n\n    if (compare.join('') === res) {\n      return compare.join('');\n    }\n\n    return res;\n  }\n\n  shiftTypedSymbols(inputValue) {\n    let symbolToReplace = '';\n    const newInputValue = inputValue && inputValue.split('').map((currSymbol, index) => {\n      if (this.maskSpecialCharacters.includes(inputValue[index + 1]) && inputValue[index + 1] !== this.maskExpression[index + 1]) {\n        symbolToReplace = currSymbol;\n        return inputValue[index + 1];\n      }\n\n      if (symbolToReplace.length) {\n        const replaceSymbol = symbolToReplace;\n        symbolToReplace = '';\n        return replaceSymbol;\n      }\n\n      return currSymbol;\n    }) || [];\n    return newInputValue.join('');\n  }\n\n  showMaskInInput(inputVal) {\n    if (this.showMaskTyped && !!this.shownMaskExpression) {\n      if (this.maskExpression.length !== this.shownMaskExpression.length) {\n        throw new Error('Mask expression must match mask placeholder length');\n      } else {\n        return this.shownMaskExpression;\n      }\n    } else if (this.showMaskTyped) {\n      if (inputVal) {\n        if (this.maskExpression === 'IP') {\n          return this._checkForIp(inputVal);\n        }\n\n        if (this.maskExpression === 'CPF_CNPJ') {\n          return this._checkForCpfCnpj(inputVal);\n        }\n      }\n\n      return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n    }\n\n    return '';\n  }\n\n  clearIfNotMatchFn() {\n    const formElement = this._elementRef.nativeElement;\n\n    if (this.clearIfNotMatch && this.prefix.length + this.maskExpression.length + this.suffix.length !== formElement.value.replace(/_/g, '').length) {\n      this.formElementProperty = ['value', ''];\n      this.applyMask(formElement.value, this.maskExpression);\n    }\n  }\n\n  set formElementProperty([name, value]) {\n    Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n  }\n\n  checkSpecialCharAmount(mask) {\n    const chars = mask.split('').filter(item => this._findSpecialChar(item));\n    return chars.length;\n  }\n\n  removeMask(inputValue) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n  }\n\n  _checkForIp(inputVal) {\n    if (inputVal === '#') {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return this.placeHolderCharacter;\n    }\n\n    if (arr.length > 9 && arr.length <= 12) {\n      return '';\n    }\n\n    return '';\n  }\n\n  _checkForCpfCnpj(inputVal) {\n    const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n    const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` + `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n\n    if (inputVal === '#') {\n      return cpf;\n    }\n\n    const arr = [];\n\n    for (let i = 0; i < inputVal.length; i++) {\n      if (inputVal[i].match('\\\\d')) {\n        arr.push(inputVal[i]);\n      }\n    }\n\n    if (arr.length <= 3) {\n      return cpf.slice(arr.length, cpf.length);\n    }\n\n    if (arr.length > 3 && arr.length <= 6) {\n      return cpf.slice(arr.length + 1, cpf.length);\n    }\n\n    if (arr.length > 6 && arr.length <= 9) {\n      return cpf.slice(arr.length + 2, cpf.length);\n    }\n\n    if (arr.length > 9 && arr.length < 11) {\n      return cpf.slice(arr.length + 3, cpf.length);\n    }\n\n    if (arr.length === 11) {\n      return '';\n    }\n\n    if (arr.length === 12) {\n      if (inputVal.length === 17) {\n        return cnpj.slice(16, cnpj.length);\n      }\n\n      return cnpj.slice(15, cnpj.length);\n    }\n\n    if (arr.length > 12 && arr.length <= 14) {\n      return cnpj.slice(arr.length + 4, cnpj.length);\n    }\n\n    return '';\n  }\n  /**\n   * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n   * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n   * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n   * model value too. Therefore, we don't trigger onChange in this scenario.\n   * @param inputValue the current form input value\n   */\n\n\n  formControlResult(inputValue) {\n    if (this.writingValue) {\n      return;\n    }\n\n    if (Array.isArray(this.dropSpecialCharacters)) {\n      this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n    } else if (this.dropSpecialCharacters) {\n      this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n    } else {\n      this.onChange(this._removeSuffix(inputValue));\n    }\n  }\n\n  _toNumber(value) {\n    if (!this.isNumberValue) {\n      return value;\n    }\n\n    const num = Number(value);\n    return Number.isNaN(num) ? value : num;\n  }\n\n  _removeMask(value, specialCharactersForRemove) {\n    return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n  }\n\n  _removePrefix(value) {\n    if (!this.prefix) {\n      return value;\n    }\n\n    return value ? value.replace(this.prefix, '') : value;\n  }\n\n  _removeSuffix(value) {\n    if (!this.suffix) {\n      return value;\n    }\n\n    return value ? value.replace(this.suffix, '') : value;\n  }\n\n  _retrieveSeparatorValue(result) {\n    return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n  }\n\n  _regExpForRemove(specialCharactersForRemove) {\n    return new RegExp(specialCharactersForRemove.map(item => `\\\\${item}`).join('|'), 'gi');\n  }\n\n  _checkSymbols(result) {\n    if (result === '') {\n      return result;\n    }\n\n    const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n\n    let separatorValue = this._retrieveSeparatorValue(result);\n\n    if (this.decimalMarker !== '.') {\n      separatorValue = separatorValue.replace(this.decimalMarker, '.');\n    }\n\n    if (!this.isNumberValue) {\n      return separatorValue;\n    }\n\n    if (separatorPrecision) {\n      if (result === this.decimalMarker) {\n        return null;\n      }\n\n      return this._checkPrecision(this.maskExpression, separatorValue);\n    } else {\n      return Number(separatorValue);\n    }\n  } // TODO should think about helpers or separting decimal precision to own property\n\n\n  _retrieveSeparatorPrecision(maskExpretion) {\n    const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n    return matcher ? Number(matcher[1]) : null;\n  }\n\n  _checkPrecision(separatorExpression, separatorValue) {\n    if (separatorExpression.indexOf('2') > 0) {\n      return Number(separatorValue).toFixed(2);\n    }\n\n    return Number(separatorValue);\n  }\n\n}\n\nMaskService.ɵfac = function MaskService_Factory(t) {\n  return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n};\n\nMaskService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MaskService,\n  factory: MaskService.ɵfac\n});\n\nMaskService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}, {\n  type: ElementRef\n}, {\n  type: Renderer2\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, null);\n})(); // tslint:disable deprecation\n// tslint:disable no-input-rename\n\n\nclass MaskDirective {\n  constructor(document, _maskService, _config) {\n    this.document = document;\n    this._maskService = _maskService;\n    this._config = _config;\n    this.maskExpression = '';\n    this.specialCharacters = [];\n    this.patterns = {};\n    this.prefix = '';\n    this.suffix = '';\n    this.thousandSeparator = ' ';\n    this.decimalMarker = '.';\n    this.dropSpecialCharacters = null;\n    this.hiddenInput = null;\n    this.showMaskTyped = null;\n    this.placeHolderCharacter = null;\n    this.shownMaskExpression = null;\n    this.showTemplate = null;\n    this.clearIfNotMatch = null;\n    this.validation = null;\n    this.separatorLimit = null;\n    this.allowNegativeNumbers = null;\n    this.leadZeroDateTime = null;\n    this._maskValue = '';\n    this._position = null;\n    this._maskExpressionArray = [];\n    this._justPasted = false;\n\n    this.onChange = _ => {};\n\n    this.onTouch = () => {};\n  }\n\n  ngOnChanges(changes) {\n    const {\n      maskExpression,\n      specialCharacters,\n      patterns,\n      prefix,\n      suffix,\n      thousandSeparator,\n      decimalMarker,\n      dropSpecialCharacters,\n      hiddenInput,\n      showMaskTyped,\n      placeHolderCharacter,\n      shownMaskExpression,\n      showTemplate,\n      clearIfNotMatch,\n      validation,\n      separatorLimit,\n      allowNegativeNumbers,\n      leadZeroDateTime\n    } = changes;\n\n    if (maskExpression) {\n      this._maskValue = maskExpression.currentValue || '';\n\n      if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n        this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n          return a.length - b.length;\n        });\n        this._maskValue = this._maskExpressionArray[0];\n        this.maskExpression = this._maskExpressionArray[0];\n        this._maskService.maskExpression = this._maskExpressionArray[0];\n      }\n    }\n\n    if (specialCharacters) {\n      if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n        return;\n      } else {\n        this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n      }\n    } // Only overwrite the mask available patterns if a pattern has actually been passed in\n\n\n    if (patterns && patterns.currentValue) {\n      this._maskService.maskAvailablePatterns = patterns.currentValue;\n    }\n\n    if (prefix) {\n      this._maskService.prefix = prefix.currentValue;\n    }\n\n    if (suffix) {\n      this._maskService.suffix = suffix.currentValue;\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator.currentValue;\n    }\n\n    if (decimalMarker) {\n      this._maskService.decimalMarker = decimalMarker.currentValue;\n    }\n\n    if (dropSpecialCharacters) {\n      this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n    }\n\n    if (hiddenInput) {\n      this._maskService.hiddenInput = hiddenInput.currentValue;\n    }\n\n    if (showMaskTyped) {\n      this._maskService.showMaskTyped = showMaskTyped.currentValue;\n    }\n\n    if (placeHolderCharacter) {\n      this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n    }\n\n    if (shownMaskExpression) {\n      this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n    }\n\n    if (showTemplate) {\n      this._maskService.showTemplate = showTemplate.currentValue;\n    }\n\n    if (clearIfNotMatch) {\n      this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n    }\n\n    if (validation) {\n      this._maskService.validation = validation.currentValue;\n    }\n\n    if (separatorLimit) {\n      this._maskService.separatorLimit = separatorLimit.currentValue;\n    }\n\n    if (allowNegativeNumbers) {\n      this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n\n      if (this._maskService.allowNegativeNumbers) {\n        this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter(c => c !== '-');\n      }\n    }\n\n    if (leadZeroDateTime) {\n      this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n    }\n\n    this._applyMask();\n  } // tslint:disable-next-line: cyclomatic-complexity\n\n\n  validate({\n    value\n  }) {\n    if (!this._maskService.validation || !this._maskValue) {\n      return null;\n    }\n\n    if (this._maskService.ipError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskService.cpfCnpjError) {\n      return this._createValidationError(value);\n    }\n\n    if (this._maskValue.startsWith('separator')) {\n      return null;\n    }\n\n    if (withoutValidation.includes(this._maskValue)) {\n      return null;\n    }\n\n    if (this._maskService.clearIfNotMatch) {\n      return null;\n    }\n\n    if (timeMasks.includes(this._maskValue)) {\n      return this._validateTime(value);\n    }\n\n    if (value && value.toString().length >= 1) {\n      let counterOfOpt = 0;\n\n      for (const key in this._maskService.maskAvailablePatterns) {\n        if (this._maskService.maskAvailablePatterns[key].optional && this._maskService.maskAvailablePatterns[key].optional === true) {\n          if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n            const opt = this._maskValue.split('').filter(i => i === key).join('');\n\n            counterOfOpt += opt.length;\n          } else if (this._maskValue.indexOf(key) !== -1) {\n            counterOfOpt++;\n          }\n\n          if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n            return null;\n          }\n\n          if (counterOfOpt === this._maskValue.length) {\n            return null;\n          }\n        }\n      }\n\n      if (this._maskValue.indexOf('{') === 1 && value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n        return null;\n      }\n\n      if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n        return null;\n      } else if (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*') || this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?') || this._maskValue.indexOf('{') === 1) {\n        return this._createValidationError(value);\n      }\n\n      if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n        const length = this._maskService.dropSpecialCharacters ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt : this._maskValue.length - counterOfOpt;\n\n        if (value.toString().length < length) {\n          return this._createValidationError(value);\n        }\n      }\n    }\n\n    return null;\n  }\n\n  onPaste() {\n    this._justPasted = true;\n  }\n\n  onInput(e) {\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (!this._maskValue) {\n      this.onChange(el.value);\n      return;\n    }\n\n    const position = el.selectionStart === 1 ? el.selectionStart + this._maskService.prefix.length : el.selectionStart;\n    let caretShift = 0;\n    let backspaceShift = false;\n\n    this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace', (shift, _backspaceShift) => {\n      this._justPasted = false;\n      caretShift = shift;\n      backspaceShift = _backspaceShift;\n    }); // only set the selection if the element is active\n\n\n    if (this.document.activeElement !== el) {\n      return;\n    }\n\n    this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n    let positionToApply = this._position ? this._inputValue.length + position + caretShift : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n    if (positionToApply > this._getActualInputLength()) {\n      positionToApply = this._getActualInputLength();\n    }\n\n    el.setSelectionRange(positionToApply, positionToApply);\n    this._position = null;\n  }\n\n  onBlur() {\n    if (this._maskValue) {\n      this._maskService.clearIfNotMatchFn();\n    }\n\n    this.onTouch();\n  }\n\n  onFocus(e) {\n    if (!this._maskValue) {\n      return;\n    }\n\n    const el = e.target;\n    const posStart = 0;\n    const posEnd = 0;\n\n    if (el !== null && el.selectionStart !== null && el.selectionStart === el.selectionEnd && el.selectionStart > this._maskService.prefix.length && // tslint:disable-next-line\n    e.keyCode !== 38) {\n      if (this._maskService.showMaskTyped) {\n        // We are showing the mask in the input\n        this._maskService.maskIsShown = this._maskService.showMaskInInput();\n\n        if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n          // the input ONLY contains the mask, so position the cursor at the start\n          el.focus();\n          el.setSelectionRange(posStart, posEnd);\n        } else {\n          // the input contains some characters already\n          if (el.selectionStart > this._maskService.actualValue.length) {\n            // if the user clicked beyond our value's length, position the cursor at the end of our value\n            el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n          }\n        }\n      }\n    }\n\n    const nextValue = !el.value || el.value === this._maskService.prefix ? this._maskService.prefix + this._maskService.maskIsShown : el.value;\n    /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n\n    if (el.value !== nextValue) {\n      el.value = nextValue;\n    }\n    /** fix of cursor position with prefix when mouse click occur */\n\n\n    if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n      el.selectionStart = this._maskService.prefix.length;\n      return;\n    }\n    /** select only inserted text */\n\n\n    if (el.selectionEnd > this._getActualInputLength()) {\n      el.selectionEnd = this._getActualInputLength();\n    }\n  } // tslint:disable-next-line: cyclomatic-complexity\n\n\n  onKeyDown(e) {\n    var _a;\n\n    if (!this._maskValue) {\n      return;\n    }\n\n    this._code = e.code ? e.code : e.key;\n    const el = e.target;\n    this._inputValue = el.value;\n\n    this._setMask();\n\n    if (e.keyCode === 38) {\n      e.preventDefault();\n    }\n\n    if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n      if (e.keyCode === 8 && el.value.length === 0) {\n        el.selectionStart = el.selectionEnd;\n      }\n\n      if (e.keyCode === 8 && el.selectionStart !== 0) {\n        // If specialChars is false, (shouldn't ever happen) then set to the defaults\n        this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters : this._config.specialCharacters;\n\n        if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n          el.setSelectionRange(this.prefix.length, this.prefix.length);\n        } else {\n          if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n            while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) && (this.prefix.length >= 1 && el.selectionStart > this.prefix.length || this.prefix.length === 0)) {\n              el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n            }\n          }\n\n          this.suffixCheckOnPressDelete(e.keyCode, el);\n        }\n      }\n\n      this.suffixCheckOnPressDelete(e.keyCode, el);\n\n      if (this._maskService.prefix.length && el.selectionStart <= this._maskService.prefix.length && el.selectionEnd <= this._maskService.prefix.length) {\n        e.preventDefault();\n      }\n\n      const cursorStart = el.selectionStart; // this.onFocus(e);\n\n      if (e.keyCode === 8 && !el.readOnly && cursorStart === 0 && el.selectionEnd === el.value.length && el.value.length !== 0) {\n        this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n\n        this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n      }\n    }\n\n    if (!!this.suffix && this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n      el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n    } else if (e.keyCode === 65 && e.ctrlKey === true || // Ctrl+ A\n    e.keyCode === 65 && e.metaKey === true // Cmd + A (Mac)\n    ) {\n      el.setSelectionRange(0, this._getActualInputLength());\n      e.preventDefault();\n    }\n\n    this._maskService.selStart = el.selectionStart;\n    this._maskService.selEnd = el.selectionEnd;\n  }\n  /** It writes the value in the input */\n\n\n  writeValue(inputValue) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n        if ('disable' in inputValue) {\n          this.setDisabledState(Boolean(inputValue.disable));\n        }\n\n        inputValue = inputValue.value;\n      }\n\n      if (inputValue === undefined) {\n        inputValue = '';\n      }\n\n      if (typeof inputValue === 'number') {\n        inputValue = String(inputValue);\n        inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n        this._maskService.isNumberValue = true;\n      }\n\n      if (inputValue && this._maskService.maskExpression || this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped)) {\n        // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n        this._maskService.writingValue = true;\n        this._maskService.formElementProperty = ['value', this._maskService.applyMask(inputValue, this._maskService.maskExpression)]; // Let the service know we've finished writing value\n\n        this._maskService.writingValue = false;\n      } else {\n        this._maskService.formElementProperty = ['value', inputValue];\n      }\n\n      this._inputValue = inputValue;\n    });\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n    this._maskService.onChange = this.onChange;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouch = fn;\n  }\n\n  suffixCheckOnPressDelete(keyCode, el) {\n    if (keyCode === 46 && this.suffix.length > 0) {\n      if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n    }\n\n    if (keyCode === 8) {\n      if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n        el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n      }\n\n      if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n        el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n      }\n    }\n  }\n  /** It disables the input element */\n\n\n  setDisabledState(isDisabled) {\n    this._maskService.formElementProperty = ['disabled', isDisabled];\n  }\n\n  _repeatPatternSymbols(maskExp) {\n    return maskExp.match(/{[0-9]+}/) && maskExp.split('').reduce((accum, currval, index) => {\n      this._start = currval === '{' ? index : this._start;\n\n      if (currval !== '}') {\n        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n      }\n\n      this._end = index;\n      const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n      const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n      return accum + replaceWith;\n    }, '') || maskExp;\n  } // tslint:disable-next-line:no-any\n\n\n  _applyMask() {\n    this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n    this._maskService.formElementProperty = ['value', this._maskService.applyMask(this._inputValue, this._maskService.maskExpression)];\n  }\n\n  _validateTime(value) {\n    const rowMaskLen = this._maskValue.split('').filter(s => s !== ':').length;\n\n    if (value === null || value.length === 0) {\n      return null; // Don't validate empty values to allow for optional form control\n    }\n\n    if (+value[value.length - 1] === 0 && value.length < rowMaskLen || value.length <= rowMaskLen - 2) {\n      return this._createValidationError(value);\n    }\n\n    return null;\n  }\n\n  _getActualInputLength() {\n    return this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length;\n  }\n\n  _createValidationError(actualValue) {\n    return {\n      mask: {\n        requiredMask: this._maskValue,\n        actualValue\n      }\n    };\n  }\n\n  _setMask() {\n    if (this._maskExpressionArray.length > 0) {\n      this._maskExpressionArray.some(mask => {\n        const test = this._maskService.removeMask(this._inputValue).length <= this._maskService.removeMask(mask).length;\n\n        if (this._inputValue && test) {\n          this._maskValue = mask;\n          this.maskExpression = mask;\n          this._maskService.maskExpression = mask;\n          return test;\n        } else {\n          this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n          this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n        }\n      });\n    }\n  }\n\n}\n\nMaskDirective.ɵfac = function MaskDirective_Factory(t) {\n  return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config));\n};\n\nMaskDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MaskDirective,\n  selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]],\n  hostBindings: function MaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() {\n        return ctx.onPaste();\n      })(\"input\", function MaskDirective_input_HostBindingHandler($event) {\n        return ctx.onInput($event);\n      })(\"blur\", function MaskDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function MaskDirective_click_HostBindingHandler($event) {\n        return ctx.onFocus($event);\n      })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n  },\n  inputs: {\n    maskExpression: [\"mask\", \"maskExpression\"],\n    specialCharacters: \"specialCharacters\",\n    patterns: \"patterns\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    thousandSeparator: \"thousandSeparator\",\n    decimalMarker: \"decimalMarker\",\n    dropSpecialCharacters: \"dropSpecialCharacters\",\n    hiddenInput: \"hiddenInput\",\n    showMaskTyped: \"showMaskTyped\",\n    placeHolderCharacter: \"placeHolderCharacter\",\n    shownMaskExpression: \"shownMaskExpression\",\n    showTemplate: \"showTemplate\",\n    clearIfNotMatch: \"clearIfNotMatch\",\n    validation: \"validation\",\n    separatorLimit: \"separatorLimit\",\n    allowNegativeNumbers: \"allowNegativeNumbers\",\n    leadZeroDateTime: \"leadZeroDateTime\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaskDirective),\n    multi: true\n  }, MaskService]), ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nMaskDirective.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: MaskService\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [config]\n  }]\n}];\n\nMaskDirective.propDecorators = {\n  maskExpression: [{\n    type: Input,\n    args: ['mask']\n  }],\n  specialCharacters: [{\n    type: Input\n  }],\n  patterns: [{\n    type: Input\n  }],\n  prefix: [{\n    type: Input\n  }],\n  suffix: [{\n    type: Input\n  }],\n  thousandSeparator: [{\n    type: Input\n  }],\n  decimalMarker: [{\n    type: Input\n  }],\n  dropSpecialCharacters: [{\n    type: Input\n  }],\n  hiddenInput: [{\n    type: Input\n  }],\n  showMaskTyped: [{\n    type: Input\n  }],\n  placeHolderCharacter: [{\n    type: Input\n  }],\n  shownMaskExpression: [{\n    type: Input\n  }],\n  showTemplate: [{\n    type: Input\n  }],\n  clearIfNotMatch: [{\n    type: Input\n  }],\n  validation: [{\n    type: Input\n  }],\n  separatorLimit: [{\n    type: Input\n  }],\n  allowNegativeNumbers: [{\n    type: Input\n  }],\n  leadZeroDateTime: [{\n    type: Input\n  }],\n  onPaste: [{\n    type: HostListener,\n    args: ['paste']\n  }],\n  onInput: [{\n    type: HostListener,\n    args: ['input', ['$event']]\n  }],\n  onBlur: [{\n    type: HostListener,\n    args: ['blur']\n  }],\n  onFocus: [{\n    type: HostListener,\n    args: ['click', ['$event']]\n  }],\n  onKeyDown: [{\n    type: HostListener,\n    args: ['keydown', ['$event']]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'input[mask], textarea[mask]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: forwardRef(() => MaskDirective),\n        multi: true\n      }, MaskService]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: MaskService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [config]\n      }]\n    }];\n  }, {\n    maskExpression: [{\n      type: Input,\n      args: ['mask']\n    }],\n    specialCharacters: [{\n      type: Input\n    }],\n    patterns: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    thousandSeparator: [{\n      type: Input\n    }],\n    decimalMarker: [{\n      type: Input\n    }],\n    dropSpecialCharacters: [{\n      type: Input\n    }],\n    hiddenInput: [{\n      type: Input\n    }],\n    showMaskTyped: [{\n      type: Input\n    }],\n    placeHolderCharacter: [{\n      type: Input\n    }],\n    shownMaskExpression: [{\n      type: Input\n    }],\n    showTemplate: [{\n      type: Input\n    }],\n    clearIfNotMatch: [{\n      type: Input\n    }],\n    validation: [{\n      type: Input\n    }],\n    separatorLimit: [{\n      type: Input\n    }],\n    allowNegativeNumbers: [{\n      type: Input\n    }],\n    leadZeroDateTime: [{\n      type: Input\n    }],\n    onPaste: [{\n      type: HostListener,\n      args: ['paste']\n    }],\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event']]\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass MaskPipe {\n  constructor(_maskService) {\n    this._maskService = _maskService;\n  }\n\n  transform(value, mask, thousandSeparator = null) {\n    if (!value && typeof value !== 'number') {\n      return '';\n    }\n\n    if (thousandSeparator) {\n      this._maskService.thousandSeparator = thousandSeparator;\n    }\n\n    if (typeof mask === 'string') {\n      return this._maskService.applyMask(`${value}`, mask);\n    }\n\n    return this._maskService.applyMaskWithPattern(`${value}`, mask);\n  }\n\n}\n\nMaskPipe.ɵfac = function MaskPipe_Factory(t) {\n  return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService, 16));\n};\n\nMaskPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n  name: \"mask\",\n  type: MaskPipe,\n  pure: true\n});\n\nMaskPipe.ctorParameters = () => [{\n  type: MaskApplierService\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'mask',\n      pure: true\n    }]\n  }], function () {\n    return [{\n      type: MaskApplierService\n    }];\n  }, null);\n})();\n\nclass NgxMaskModule {\n  static forRoot(configValue) {\n    return {\n      ngModule: NgxMaskModule,\n      providers: [{\n        provide: NEW_CONFIG,\n        useValue: configValue\n      }, {\n        provide: INITIAL_CONFIG,\n        useValue: initialConfig\n      }, {\n        provide: config,\n        useFactory: _configFactory,\n        deps: [INITIAL_CONFIG, NEW_CONFIG]\n      }, MaskApplierService]\n    };\n  }\n\n  static forChild() {\n    return {\n      ngModule: NgxMaskModule\n    };\n  }\n\n}\n\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) {\n  return new (t || NgxMaskModule)();\n};\n\nNgxMaskModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgxMaskModule\n});\nNgxMaskModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMaskModule, [{\n    type: NgModule,\n    args: [{\n      exports: [MaskDirective, MaskPipe],\n      declarations: [MaskDirective, MaskPipe]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, {\n    declarations: [MaskDirective, MaskPipe],\n    exports: [MaskDirective, MaskPipe]\n  });\n})();\n/**\n * @internal\n */\n\n\nfunction _configFactory(initConfig, configValue) {\n  return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nconst commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n(function () {\n  if (!commonjsGlobal.KeyboardEvent) {\n    commonjsGlobal.KeyboardEvent = function (_eventType, _init) {};\n  }\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };","map":{"version":3,"names":["InjectionToken","Injectable","Inject","ElementRef","Renderer2","Directive","forwardRef","Input","HostListener","Pipe","NgModule","__awaiter","NG_VALUE_ACCESSOR","NG_VALIDATORS","DOCUMENT","ɵngcc0","config","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showTemplate","showMaskTyped","placeHolderCharacter","dropSpecialCharacters","hiddenInput","undefined","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","patterns","pattern","RegExp","optional","X","symbol","A","S","d","m","M","H","h","s","timeMasks","withoutValidation","MaskApplierService","constructor","_config","maskExpression","actualValue","_formatWithSeparators","str","thousandSeparatorChar","decimalChar","precision","x","split","decimals","length","res","replace","slice","rgx","test","substr","percentage","Number","getPrecision","Infinity","checkAndRemoveSuffix","inputValue","_a","_b","_c","i","includes","checkInputPrecision","precisionRegEx","_charToRegExpExpression","precisionMatch","match","diff","substring","endsWith","_shift","Set","maskSpecialCharacters","maskAvailablePatterns","applyMaskWithPattern","maskAndPattern","mask","customPattern","applyMask","position","justPasted","backspaced","cb","cursor","result","multi","backspaceShift","shift","stepBack","inputArray","toString","ipError","filter","arr","push","cpfCnpjError","startsWith","_stripToDecimal","indexOf","base","thousandSeperatorCharEscaped","decimalMarkerEscaped","invalidChars","invalidCharRegexp","strForSep","commaShift","shiftStep","add","clear","inputSymbol","_checkSymbolMask","_shiftStep","daysCount","monthsCount","withoutDays","day1monthInput","day2monthInput","day1monthPaste","day2monthPaste","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","find","val","maskSymbol","idx","join","charsToEscape","inputLength","ɵfac","MaskApplierService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","MaskService","document","_elementRef","_renderer","isNumberValue","maskIsShown","selStart","selEnd","writingValue","onChange","_","showMaskInInput","formControlResult","getSymbol","newInputValue","actualResult","splice","shiftTypedSymbols","Boolean","getActualValue","item","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","value","regex","exec","applyValueChanges","formElement","nativeElement","activeElement","clearIfNotMatchFn","map","curr","index","compare","symbolToReplace","currSymbol","replaceSymbol","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkSpecialCharAmount","chars","removeMask","_removeMask","_removeSuffix","_removePrefix","concat","cpf","cnpj","Array","isArray","_toNumber","_checkSymbols","num","isNaN","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","maskExpretion","matcher","separatorExpression","toFixed","MaskService_Factory","MaskDirective","_maskService","_maskValue","_position","_maskExpressionArray","_justPasted","onTouch","ngOnChanges","changes","currentValue","sort","a","b","c","_applyMask","validate","_createValidationError","_validateTime","counterOfOpt","key","lastIndexOf","opt","onPaste","onInput","e","el","target","_inputValue","_setMask","selectionStart","caretShift","_code","_backspaceShift","positionToApply","_getActualInputLength","setSelectionRange","onBlur","onFocus","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","onKeyDown","code","preventDefault","suffixCheckOnPressDelete","cursorStart","readOnly","ctrlKey","metaKey","writeValue","setDisabledState","disable","String","registerOnChange","fn","registerOnTouched","isDisabled","_repeatPatternSymbols","maskExp","reduce","accum","currval","_start","_end","repeatNumber","replaceWith","rowMaskLen","requiredMask","some","MaskDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","MaskDirective_HostBindings","rf","ctx","ɵɵlistener","MaskDirective_paste_HostBindingHandler","MaskDirective_input_HostBindingHandler","$event","MaskDirective_blur_HostBindingHandler","MaskDirective_click_HostBindingHandler","MaskDirective_keydown_HostBindingHandler","inputs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","propDecorators","selector","providers","MaskPipe","transform","MaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure","NgxMaskModule","forRoot","configValue","ngModule","useValue","useFactory","_configFactory","deps","forChild","NgxMaskModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","initConfig","Function","Object","assign","commonjsGlobal","globalThis","window","global","self","KeyboardEvent","_eventType","_init"],"sources":["E:/PROVA/CalculoCDB/CalculoCDB/CalculoCDB.Presentation/ClientApp/node_modules/ngx-mask/__ivy_ngcc__/fesm2015/ngx-mask.js"],"sourcesContent":["import { InjectionToken, Injectable, Inject, ElementRef, Renderer2, Directive, forwardRef, Input, HostListener, Pipe, NgModule } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { DOCUMENT } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nconst config = new InjectionToken('config');\nconst NEW_CONFIG = new InjectionToken('NEW_CONFIG');\nconst INITIAL_CONFIG = new InjectionToken('INITIAL_CONFIG');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: '.',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = ['Hh:m0:s0', 'Hh:m0', 'm0:s0'];\nconst withoutValidation = [\n    'percent',\n    'Hh',\n    's0',\n    'm0',\n    'separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n\nclass MaskApplierService {\n    constructor(_config) {\n        this._config = _config;\n        this.maskExpression = '';\n        this.actualValue = '';\n        this.shownMaskExpression = '';\n        this._formatWithSeparators = (str, thousandSeparatorChar, decimalChar, precision) => {\n            const x = str.split(decimalChar);\n            const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n            let res = x[0];\n            const separatorLimit = this.separatorLimit.replace(/\\s/g, '');\n            if (separatorLimit && +separatorLimit) {\n                if (res[0] === '-') {\n                    res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n                }\n                else {\n                    res = res.slice(0, separatorLimit.length);\n                }\n            }\n            const rgx = /(\\d+)(\\d{3})/;\n            while (thousandSeparatorChar && rgx.test(res)) {\n                res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n            }\n            if (precision === undefined) {\n                return res + decimals;\n            }\n            else if (precision === 0) {\n                return res;\n            }\n            return res + decimals.substr(0, precision + 1);\n        };\n        this.percentage = (str) => {\n            return Number(str) >= 0 && Number(str) <= 100;\n        };\n        this.getPrecision = (maskExpression) => {\n            const x = maskExpression.split('.');\n            if (x.length > 1) {\n                return Number(x[x.length - 1]);\n            }\n            return Infinity;\n        };\n        this.checkAndRemoveSuffix = (inputValue) => {\n            var _a, _b, _c;\n            for (let i = ((_a = this.suffix) === null || _a === void 0 ? void 0 : _a.length) - 1; i >= 0; i--) {\n                const substr = this.suffix.substr(i, (_b = this.suffix) === null || _b === void 0 ? void 0 : _b.length);\n                if (inputValue.includes(substr) &&\n                    (i - 1 < 0 || !inputValue.includes(this.suffix.substr(i - 1, (_c = this.suffix) === null || _c === void 0 ? void 0 : _c.length)))) {\n                    return inputValue.replace(substr, '');\n                }\n            }\n            return inputValue;\n        };\n        this.checkInputPrecision = (inputValue, precision, decimalMarker) => {\n            if (precision < Infinity) {\n                const precisionRegEx = new RegExp(this._charToRegExpExpression(decimalMarker) + `\\\\d{${precision}}.*$`);\n                const precisionMatch = inputValue.match(precisionRegEx);\n                if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                    const diff = precisionMatch[0].length - 1 - precision;\n                    inputValue = inputValue.substring(0, inputValue.length - diff);\n                }\n                if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n            }\n            return inputValue;\n        };\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.thousandSeparator = this._config.thousandSeparator;\n        this.decimalMarker = this._config.decimalMarker;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.placeHolderCharacter = this._config.placeHolderCharacter;\n        this.validation = this._config.validation;\n        this.separatorLimit = this._config.separatorLimit;\n        this.allowNegativeNumbers = this._config.allowNegativeNumbers;\n        this.leadZeroDateTime = this._config.leadZeroDateTime;\n    }\n    applyMaskWithPattern(inputValue, maskAndPattern) {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        if (!!this.suffix && (inputValue === null || inputValue === void 0 ? void 0 : inputValue.length) > 0) {\n            inputValue = this.checkAndRemoveSuffix(inputValue);\n        }\n        const inputArray = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < inputValue.length; i++) {\n            if (inputValue[i].match('\\\\d')) {\n                arr.push(inputValue[i]);\n            }\n        }\n        if (maskExpression === 'CPF_CNPJ') {\n            this.cpfCnpjError = !!(arr.length !== 11 && arr.length !== 14);\n            if (arr.length > 11) {\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/)) {\n                inputValue = this._stripToDecimal(inputValue);\n                const precision = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            }\n            if (inputValue.indexOf('.') > 0 && !this.percentage(inputValue.substring(0, inputValue.indexOf('.')))) {\n                const base = inputValue.substring(0, inputValue.indexOf('.') - 1);\n                inputValue = `${base}${inputValue.substring(inputValue.indexOf('.'), inputValue.length)}`;\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            }\n            else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        else if (maskExpression.startsWith('separator')) {\n            if (inputValue.match('[wа-яА-Я]') ||\n                inputValue.match('[ЁёА-я]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\[\\]:\";<>.?\\/]/) ||\n                inputValue.match('[^A-Za-z0-9,]')) {\n                inputValue = this._stripToDecimal(inputValue);\n            }\n            inputValue =\n                inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== this.decimalMarker\n                    ? inputValue.slice(1, inputValue.length)\n                    : inputValue;\n            // TODO: we had different rexexps here for the different cases... but tests dont seam to bother - check this\n            //  separator: no COMMA, dot-sep: no SPACE, COMMA OK, comma-sep: no SPACE, COMMA OK\n            const thousandSeperatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            const decimalMarkerEscaped = this._charToRegExpExpression(this.decimalMarker);\n            const invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'\n                .replace(thousandSeperatorCharEscaped, '')\n                .replace(decimalMarkerEscaped, '');\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (inputValue.match(invalidCharRegexp)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n            const precision = this.getPrecision(maskExpression);\n            inputValue = this.checkInputPrecision(inputValue, precision, this.decimalMarker);\n            const strForSep = inputValue.replace(new RegExp(thousandSeperatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep = result.length - inputValue.length;\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if ((commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (\n            // tslint:disable-next-line\n            let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i]) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '*') {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor])) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    if (maskExpression[cursor] === 'd') {\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            Number(inputValue.slice(cursor, cursor + 2)) > daysCount ||\n                            inputValue[cursor + 1] === '/') {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        const monthsCount = 12;\n                        // mask without day\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValue.slice(cursor, cursor + 2)) > monthsCount ||\n                                inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for input\n                        const day1monthInput = inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            ((inputValue[cursor - 2] === '/' &&\n                                Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount &&\n                                inputValue[cursor] !== '/') ||\n                                inputValue[cursor] === '/' ||\n                                (inputValue[cursor - 3] === '/' &&\n                                    Number(inputValue.slice(cursor - 2, cursor)) > monthsCount &&\n                                    inputValue[cursor - 1] !== '/') ||\n                                inputValue[cursor - 1] === '/');\n                        // 10<day<31 && month<12 for input\n                        const day2monthInput = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] === '/' &&\n                            (Number(inputValue.slice(cursor, cursor + 2)) > monthsCount || inputValue[cursor + 1] === '/');\n                        // day<10 && month<12 for paste whole data\n                        const day1monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) > daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            !inputValue.slice(cursor - 2, cursor).includes('/') &&\n                            Number(inputValue.slice(cursor - 2, cursor)) > monthsCount;\n                        // 10<day<31 && month<12 for paste whole data\n                        const day2monthPaste = Number(inputValue.slice(cursor - 3, cursor - 1)) <= daysCount &&\n                            !inputValue.slice(cursor - 3, cursor - 1).includes('/') &&\n                            inputValue[cursor - 1] !== '/' &&\n                            Number(inputValue.slice(cursor - 1, cursor + 1)) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthInput ||\n                            day1monthPaste ||\n                            day2monthPaste) {\n                            cursor += 1;\n                            this._shiftStep(maskExpression, cursor, inputArray.length);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(maskExpression, cursor, inputArray.length);\n                    i--;\n                }\n                else if (this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00') {\n                        result += inputArray[cursor];\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.maskSpecialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = position + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted ? cursor : this._shift.has(position) ? shift : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.maskSpecialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? '' : result}${this.suffix}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.maskSpecialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol));\n    }\n    _stripToDecimal(str) {\n        return str\n            .split('')\n            .filter((i, idx) => {\n            return (i.match('^-?\\\\d') ||\n                i.match('\\\\s') ||\n                i === '.' ||\n                i === ',' ||\n                (i === '-' && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join('');\n    }\n    _charToRegExpExpression(char) {\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? '\\\\' + char : char;\n        }\n        return char;\n    }\n    _shiftStep(maskExpression, cursor, inputLength) {\n        const shiftStep = /[*?]/g.test(maskExpression.slice(0, cursor)) ? inputLength : cursor;\n        this._shift.add(shiftStep + this.prefix.length || 0);\n    }\n}\nMaskApplierService.ɵfac = function MaskApplierService_Factory(t) { return new (t || MaskApplierService)(ɵngcc0.ɵɵinject(config)); };\nMaskApplierService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MaskApplierService, factory: MaskApplierService.ɵfac });\nMaskApplierService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskApplierService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }]; }, null); })();\n\nclass MaskService extends MaskApplierService {\n    constructor(document, _config, _elementRef, _renderer) {\n        super(_config);\n        this.document = document;\n        this._config = _config;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this.maskExpression = '';\n        this.isNumberValue = false;\n        this.placeHolderCharacter = '_';\n        this.maskIsShown = '';\n        this.selStart = null;\n        this.selEnd = null;\n        /**\n         * Whether we are currently in writeValue function, in this case when applying the mask we don't want to trigger onChange function,\n         * since writeValue should be a one way only process of writing the DOM value based on the Angular model value.\n         */\n        this.writingValue = false;\n        this.onChange = (_) => { };\n    }\n    // tslint:disable-next-line:cyclomatic-complexity\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (this.maskExpression === 'CPF_CNPJ' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue = '';\n        if (this.hiddenInput !== undefined) {\n            let actualResult = this.actualValue.split('');\n            // tslint:disable no-unused-expression\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                            ? actualResult.length - inputValue.length === 1\n                                ? actualResult.splice(this.selStart - 1, 1)\n                                : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                            : null\n                    : null\n                : (actualResult = []);\n            // tslint:enable no-unused-expression\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result = super.applyMask(newInputValue, maskExpression, position, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        // handle some separator implications:\n        // a.) adjust decimalMarker default (. -> ,) if thousandSeparator is a dot\n        if (this.thousandSeparator === '.' && this.decimalMarker === '.') {\n            this.decimalMarker = ',';\n        }\n        // b) remove decimal marker from list of special characters to mask\n        if (this.maskExpression.startsWith('separator') && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item) => item !== this.decimalMarker);\n        }\n        this.formControlResult(result);\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = this.prefix + this.maskIsShown;\n        if (this.maskExpression.includes('H')) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return result + prefNmask.slice(resLen + countSkipedSymbol);\n        }\n        else if (this.maskExpression === 'IP' || this.maskExpression === 'CPF_CNPJ') {\n            return result + prefNmask;\n        }\n        return result + prefNmask.slice(resLen);\n    }\n    // get the number of characters that were shifted\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position = 0, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef.nativeElement;\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split('')\n            .map((curr, index) => {\n            if (this.maskAvailablePatterns &&\n                this.maskAvailablePatterns[maskExpression[index]] &&\n                this.maskAvailablePatterns[maskExpression[index]].symbol) {\n                return this.maskAvailablePatterns[maskExpression[index]].symbol;\n            }\n            return curr;\n        })\n            .join('');\n    }\n    // this function is not necessary, it checks result against maskExpression\n    getActualValue(res) {\n        const compare = res\n            .split('')\n            .filter((symbol, i) => this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n            (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i]));\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue.split('').map((currSymbol, index) => {\n                if (this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = '';\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join('');\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === 'IP') {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === 'CPF_CNPJ') {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef.nativeElement;\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(/_/g, '').length) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(formElement.value, this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        Promise.resolve().then(() => this._renderer.setProperty(this._elementRef.nativeElement, name, value));\n    }\n    checkSpecialCharAmount(mask) {\n        const chars = mask.split('').filter((item) => this._findSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.maskSpecialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === '#') {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === '#') {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    /**\n     * Propogates the input value back to the Angular model by triggering the onChange function. It won't do this if writingValue\n     * is true. If that is true it means we are currently in the writeValue function, which is supposed to only update the actual\n     * DOM element based on the Angular model value. It should be a one way process, i.e. writeValue should not be modifying the Angular\n     * model value too. Therefore, we don't trigger onChange in this scenario.\n     * @param inputValue the current form input value\n     */\n    formControlResult(inputValue) {\n        if (this.writingValue) {\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this._toNumber(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)));\n        }\n        else if (this.dropSpecialCharacters) {\n            this.onChange(this._toNumber(this._checkSymbols(inputValue)));\n        }\n        else {\n            this.onChange(this._removeSuffix(inputValue));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue) {\n            return value;\n        }\n        const num = Number(value);\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n    _retrieveSeparatorValue(result) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _checkSymbols(result) {\n        if (result === '') {\n            return result;\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        let separatorValue = this._retrieveSeparatorValue(result);\n        if (this.decimalMarker !== '.') {\n            separatorValue = separatorValue.replace(this.decimalMarker, '.');\n        }\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (result === this.decimalMarker) {\n                return null;\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return Number(separatorValue);\n        }\n    }\n    // TODO should think about helpers or separting decimal precision to own property\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        if (separatorExpression.indexOf('2') > 0) {\n            return Number(separatorValue).toFixed(2);\n        }\n        return Number(separatorValue);\n    }\n}\nMaskService.ɵfac = function MaskService_Factory(t) { return new (t || MaskService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(config), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };\nMaskService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: MaskService, factory: MaskService.ɵfac });\nMaskService.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] },\n    { type: ElementRef },\n    { type: Renderer2 }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskService, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, null); })();\n\n// tslint:disable deprecation\n// tslint:disable no-input-rename\nclass MaskDirective {\n    constructor(document, _maskService, _config) {\n        this.document = document;\n        this._maskService = _maskService;\n        this._config = _config;\n        this.maskExpression = '';\n        this.specialCharacters = [];\n        this.patterns = {};\n        this.prefix = '';\n        this.suffix = '';\n        this.thousandSeparator = ' ';\n        this.decimalMarker = '.';\n        this.dropSpecialCharacters = null;\n        this.hiddenInput = null;\n        this.showMaskTyped = null;\n        this.placeHolderCharacter = null;\n        this.shownMaskExpression = null;\n        this.showTemplate = null;\n        this.clearIfNotMatch = null;\n        this.validation = null;\n        this.separatorLimit = null;\n        this.allowNegativeNumbers = null;\n        this.leadZeroDateTime = null;\n        this._maskValue = '';\n        this._position = null;\n        this._maskExpressionArray = [];\n        this._justPasted = false;\n        this.onChange = (_) => { };\n        this.onTouch = () => { };\n    }\n    ngOnChanges(changes) {\n        const { maskExpression, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, showTemplate, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, } = changes;\n        if (maskExpression) {\n            this._maskValue = maskExpression.currentValue || '';\n            if (maskExpression.currentValue && maskExpression.currentValue.split('||').length > 1) {\n                this._maskExpressionArray = maskExpression.currentValue.split('||').sort((a, b) => {\n                    return a.length - b.length;\n                });\n                this._maskValue = this._maskExpressionArray[0];\n                this.maskExpression = this._maskExpressionArray[0];\n                this._maskService.maskExpression = this._maskExpressionArray[0];\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.maskSpecialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        // Only overwrite the mask available patterns if a pattern has actually been passed in\n        if (patterns && patterns.currentValue) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.maskSpecialCharacters = this._maskService.maskSpecialCharacters.filter((c) => c !== '-');\n            }\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        this._applyMask();\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    validate({ value }) {\n        if (!this._maskService.validation || !this._maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(value);\n        }\n        if (this._maskValue.startsWith('separator')) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(this._maskValue)) {\n            return this._validateTime(value);\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt = this._maskValue\n                            .split('')\n                            .filter((i) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    }\n                    else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (this._maskValue.indexOf(key) !== -1 && value.toString().length >= this._maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (this._maskValue.indexOf('{') === 1 &&\n                value.toString().length === this._maskValue.length + Number(this._maskValue.split('{')[1].split('}')[0]) - 4) {\n                return null;\n            }\n            if (this._maskValue.indexOf('*') === 1 || this._maskValue.indexOf('?') === 1) {\n                return null;\n            }\n            else if ((this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?')) ||\n                this._maskValue.indexOf('{') === 1) {\n                return this._createValidationError(value);\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return this._createValidationError(value);\n                }\n            }\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted = true;\n    }\n    onInput(e) {\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position = el.selectionStart === 1\n            ? el.selectionStart + this._maskService.prefix.length\n            : el.selectionStart;\n        let caretShift = 0;\n        let backspaceShift = false;\n        this._maskService.applyValueChanges(position, this._justPasted, this._code === 'Backspace', (shift, _backspaceShift) => {\n            this._justPasted = false;\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n        let positionToApply = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n        if (positionToApply > this._getActualInputLength()) {\n            positionToApply = this._getActualInputLength();\n        }\n        el.setSelectionRange(positionToApply, positionToApply);\n        this._position = null;\n    }\n    onBlur() {\n        if (this._maskValue) {\n            this._maskService.clearIfNotMatchFn();\n        }\n        this.onTouch();\n    }\n    onFocus(e) {\n        if (!this._maskValue) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped) {\n                // We are showing the mask in the input\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    // the input ONLY contains the mask, so position the cursor at the start\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    // the input contains some characters already\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        // if the user clicked beyond our value's length, position the cursor at the end of our value\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = !el.value || el.value === this._maskService.prefix\n            ? this._maskService.prefix + this._maskService.maskIsShown\n            : el.value;\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        /** fix of cursor position with prefix when mouse click occur */\n        if ((el.selectionStart || el.selectionEnd) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n        /** select only inserted text */\n        if (el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown(e) {\n        var _a;\n        if (!this._maskValue) {\n            return;\n        }\n        this._code = e.code ? e.code : e.key;\n        const el = e.target;\n        this._inputValue = el.value;\n        this._setMask();\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8 || e.keyCode === 46) {\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.selectionStart !== 0) {\n                // If specialChars is false, (shouldn't ever happen) then set to the defaults\n                this.specialCharacters = ((_a = this.specialCharacters) === null || _a === void 0 ? void 0 : _a.length) ? this.specialCharacters\n                    : this._config.specialCharacters;\n                if (this.prefix.length > 1 && el.selectionStart <= this.prefix.length) {\n                    el.setSelectionRange(this.prefix.length, this.prefix.length);\n                }\n                else {\n                    if (this._inputValue.length !== el.selectionStart && el.selectionStart !== 1) {\n                        while (this.specialCharacters.includes(this._inputValue[el.selectionStart - 1].toString()) &&\n                            ((this.prefix.length >= 1 && el.selectionStart > this.prefix.length) ||\n                                this.prefix.length === 0)) {\n                            el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n                        }\n                    }\n                    this.suffixCheckOnPressDelete(e.keyCode, el);\n                }\n            }\n            this.suffixCheckOnPressDelete(e.keyCode, el);\n            if (this._maskService.prefix.length &&\n                el.selectionStart <= this._maskService.prefix.length &&\n                el.selectionEnd <= this._maskService.prefix.length) {\n                e.preventDefault();\n            }\n            const cursorStart = el.selectionStart;\n            // this.onFocus(e);\n            if (e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n        if (!!this.suffix &&\n            this.suffix.length > 1 &&\n            this._inputValue.length - this.suffix.length < el.selectionStart) {\n            el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n        }\n        else if ((e.keyCode === 65 && e.ctrlKey === true) || // Ctrl+ A\n            (e.keyCode === 65 && e.metaKey === true) // Cmd + A (Mac)\n        ) {\n            el.setSelectionRange(0, this._getActualInputLength());\n            e.preventDefault();\n        }\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n    }\n    /** It writes the value in the input */\n    writeValue(inputValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof inputValue === 'object' && inputValue !== null && 'value' in inputValue) {\n                if ('disable' in inputValue) {\n                    this.setDisabledState(Boolean(inputValue.disable));\n                }\n                inputValue = inputValue.value;\n            }\n            if (inputValue === undefined) {\n                inputValue = '';\n            }\n            if (typeof inputValue === 'number') {\n                inputValue = String(inputValue);\n                inputValue = this.decimalMarker !== '.' ? inputValue.replace('.', this.decimalMarker) : inputValue;\n                this._maskService.isNumberValue = true;\n            }\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                // Let the service we know we are writing value so that triggering onChange function wont happen during applyMask\n                this._maskService.writingValue = true;\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                // Let the service know we've finished writing value\n                this._maskService.writingValue = false;\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue = inputValue;\n        });\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    suffixCheckOnPressDelete(keyCode, el) {\n        if (keyCode === 46 && this.suffix.length > 0) {\n            if (this._inputValue.length - this.suffix.length <= el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n        }\n        if (keyCode === 8) {\n            if (this.suffix.length > 1 && this._inputValue.length - this.suffix.length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue.length - this.suffix.length, this._inputValue.length);\n            }\n            if (this.suffix.length === 1 && this._inputValue.length === el.selectionStart) {\n                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n            }\n        }\n    }\n    /** It disables the input element */\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp.split('').reduce((accum, currval, index) => {\n                this._start = currval === '{' ? index : this._start;\n                if (currval !== '}') {\n                    return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                return accum + replaceWith;\n            }, '')) ||\n            maskExp);\n    }\n    // tslint:disable-next-line:no-any\n    _applyMask() {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue.split('').filter((s) => s !== ':').length;\n        if (value === null || value.length === 0) {\n            return null; // Don't validate empty values to allow for optional form control\n        }\n        if ((+value[value.length - 1] === 0 && value.length < rowMaskLen) || value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length || this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue,\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        if (this._maskExpressionArray.length > 0) {\n            this._maskExpressionArray.some((mask) => {\n                const test = this._maskService.removeMask(this._inputValue).length <= this._maskService.removeMask(mask).length;\n                if (this._inputValue && test) {\n                    this._maskValue = mask;\n                    this.maskExpression = mask;\n                    this._maskService.maskExpression = mask;\n                    return test;\n                }\n                else {\n                    this._maskValue = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                    this._maskService.maskExpression = this._maskExpressionArray[this._maskExpressionArray.length - 1];\n                }\n            });\n        }\n    }\n}\nMaskDirective.ɵfac = function MaskDirective_Factory(t) { return new (t || MaskDirective)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(MaskService), ɵngcc0.ɵɵdirectiveInject(config)); };\nMaskDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MaskDirective, selectors: [[\"input\", \"mask\", \"\"], [\"textarea\", \"mask\", \"\"]], hostBindings: function MaskDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"paste\", function MaskDirective_paste_HostBindingHandler() { return ctx.onPaste(); })(\"input\", function MaskDirective_input_HostBindingHandler($event) { return ctx.onInput($event); })(\"blur\", function MaskDirective_blur_HostBindingHandler() { return ctx.onBlur(); })(\"click\", function MaskDirective_click_HostBindingHandler($event) { return ctx.onFocus($event); })(\"keydown\", function MaskDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\n    } }, inputs: { maskExpression: [\"mask\", \"maskExpression\"], specialCharacters: \"specialCharacters\", patterns: \"patterns\", prefix: \"prefix\", suffix: \"suffix\", thousandSeparator: \"thousandSeparator\", decimalMarker: \"decimalMarker\", dropSpecialCharacters: \"dropSpecialCharacters\", hiddenInput: \"hiddenInput\", showMaskTyped: \"showMaskTyped\", placeHolderCharacter: \"placeHolderCharacter\", shownMaskExpression: \"shownMaskExpression\", showTemplate: \"showTemplate\", clearIfNotMatch: \"clearIfNotMatch\", validation: \"validation\", separatorLimit: \"separatorLimit\", allowNegativeNumbers: \"allowNegativeNumbers\", leadZeroDateTime: \"leadZeroDateTime\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MaskDirective),\n                multi: true\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: forwardRef(() => MaskDirective),\n                multi: true\n            },\n            MaskService,\n        ]), ɵngcc0.ɵɵNgOnChangesFeature] });\nMaskDirective.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: MaskService },\n    { type: undefined, decorators: [{ type: Inject, args: [config,] }] }\n];\nMaskDirective.propDecorators = {\n    maskExpression: [{ type: Input, args: ['mask',] }],\n    specialCharacters: [{ type: Input }],\n    patterns: [{ type: Input }],\n    prefix: [{ type: Input }],\n    suffix: [{ type: Input }],\n    thousandSeparator: [{ type: Input }],\n    decimalMarker: [{ type: Input }],\n    dropSpecialCharacters: [{ type: Input }],\n    hiddenInput: [{ type: Input }],\n    showMaskTyped: [{ type: Input }],\n    placeHolderCharacter: [{ type: Input }],\n    shownMaskExpression: [{ type: Input }],\n    showTemplate: [{ type: Input }],\n    clearIfNotMatch: [{ type: Input }],\n    validation: [{ type: Input }],\n    separatorLimit: [{ type: Input }],\n    allowNegativeNumbers: [{ type: Input }],\n    leadZeroDateTime: [{ type: Input }],\n    onPaste: [{ type: HostListener, args: ['paste',] }],\n    onInput: [{ type: HostListener, args: ['input', ['$event'],] }],\n    onBlur: [{ type: HostListener, args: ['blur',] }],\n    onFocus: [{ type: HostListener, args: ['click', ['$event'],] }],\n    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskDirective, [{\n        type: Directive,\n        args: [{\n                selector: 'input[mask], textarea[mask]',\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true\n                    },\n                    {\n                        provide: NG_VALIDATORS,\n                        useExisting: forwardRef(() => MaskDirective),\n                        multi: true\n                    },\n                    MaskService,\n                ]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MaskService }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [config]\n            }] }]; }, { maskExpression: [{\n            type: Input,\n            args: ['mask']\n        }], specialCharacters: [{\n            type: Input\n        }], patterns: [{\n            type: Input\n        }], prefix: [{\n            type: Input\n        }], suffix: [{\n            type: Input\n        }], thousandSeparator: [{\n            type: Input\n        }], decimalMarker: [{\n            type: Input\n        }], dropSpecialCharacters: [{\n            type: Input\n        }], hiddenInput: [{\n            type: Input\n        }], showMaskTyped: [{\n            type: Input\n        }], placeHolderCharacter: [{\n            type: Input\n        }], shownMaskExpression: [{\n            type: Input\n        }], showTemplate: [{\n            type: Input\n        }], clearIfNotMatch: [{\n            type: Input\n        }], validation: [{\n            type: Input\n        }], separatorLimit: [{\n            type: Input\n        }], allowNegativeNumbers: [{\n            type: Input\n        }], leadZeroDateTime: [{\n            type: Input\n        }], onPaste: [{\n            type: HostListener,\n            args: ['paste']\n        }], onInput: [{\n            type: HostListener,\n            args: ['input', ['$event']]\n        }], onBlur: [{\n            type: HostListener,\n            args: ['blur']\n        }], onFocus: [{\n            type: HostListener,\n            args: ['click', ['$event']]\n        }], \n    // tslint:disable-next-line: cyclomatic-complexity\n    onKeyDown: [{\n            type: HostListener,\n            args: ['keydown', ['$event']]\n        }] }); })();\n\nclass MaskPipe {\n    constructor(_maskService) {\n        this._maskService = _maskService;\n    }\n    transform(value, mask, thousandSeparator = null) {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator;\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\nMaskPipe.ɵfac = function MaskPipe_Factory(t) { return new (t || MaskPipe)(ɵngcc0.ɵɵdirectiveInject(MaskApplierService, 16)); };\nMaskPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"mask\", type: MaskPipe, pure: true });\nMaskPipe.ctorParameters = () => [\n    { type: MaskApplierService }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MaskPipe, [{\n        type: Pipe,\n        args: [{\n                name: 'mask',\n                pure: true\n            }]\n    }], function () { return [{ type: MaskApplierService }]; }, null); })();\n\nclass NgxMaskModule {\n    static forRoot(configValue) {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    static forChild() {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\nNgxMaskModule.ɵfac = function NgxMaskModule_Factory(t) { return new (t || NgxMaskModule)(); };\nNgxMaskModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgxMaskModule });\nNgxMaskModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxMaskModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MaskDirective, MaskPipe],\n                declarations: [MaskDirective, MaskPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxMaskModule, { declarations: [MaskDirective, MaskPipe], exports: [MaskDirective, MaskPipe] }); })();\n/**\n * @internal\n */\nfunction _configFactory(initConfig, configValue) {\n    return configValue instanceof Function ? Object.assign(Object.assign({}, initConfig), configValue()) : Object.assign(Object.assign({}, initConfig), configValue);\n}\n\nconst commonjsGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof window !== 'undefined'\n        ? window\n        : typeof global !== 'undefined'\n            ? global\n            : typeof self !== 'undefined'\n                ? self\n                : {};\n(function () {\n    if (!commonjsGlobal.KeyboardEvent) {\n        commonjsGlobal.KeyboardEvent = function (_eventType, _init) { };\n    }\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_CONFIG, MaskApplierService, MaskDirective, MaskPipe, MaskService, NEW_CONFIG, NgxMaskModule, _configFactory, config, initialConfig, timeMasks, withoutValidation };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}